{"version":3,"sources":["ContextStore.js","components/Header/Header.js","components/Footer/Footer.js","utils/nft-market.js","components/ProductCard/ProductCard.js","utils/mint-nft.js","Pages/Categories.js","Pages/CreateSell.js","utils/ipfs.js","Pages/Error404.js","App.js","reportWebVitals.js","index.js"],"names":["Context","React","createContext","ContextStore","children","useState","userData","setUserData","useEffect","providerValue","useMemo","Provider","value","Header","ethereum","window","currentAccount","setCurrentAccount","history","useHistory","a","console","log","request","method","then","accounts","length","init_application","on","go","connectWalletHandler","web3Modal","Web3Modal","network","cacheProvider","providerOptions","connect","Navbar","collapseOnSelect","bg","variant","className","Brand","to","Toggle","Collapse","id","Nav","onClick","push","pathname","substring","Footer","href","target","rel","require","config","NFT_CONTRACT","process","MARKET_CONTRACT","GetMarketItems","marketContract","methods","fetchMarketItems","call","YourNFTsListing","fetchMyNFTsListingOnMarket","AddNewListing","web3","tokenID","price","priceToWei","utils","toWei","toString","tx","selectedAddress","toHex","Number","Math","pow","addListing","encodeABI","confirmMetamask","UpdateListing","updateListing","CancelListing","cancelListing","BuyNFT","itemID","from","data","buyItem","params","transactionReceipt","ProductCard","type","current_wallet","nftContract","nftData","setNftData","priceSell","setPriceSell","Web3","currentProvider","tokenUri","fetch","response","json","responseJson","catch","error","getNFTData","changePrice","e","onSubmitSellNFT","tokenId","alert","onSubmitUpdatePriceNFT","onSubmitBuyNFT","onSubmitCancelSellNFT","Card","Img","src","image","Body","Title","name","description","fromWei","seller","InputGroup","FormControl","min","placeholder","onChange","Text","Button","MAIN_ADDRESS","MintNFT","tokenURI","eth","getTransactionCount","nonce","mintItem","signTransaction","signedTx","sendSignedTransaction","rawTransaction","JSON","stringify","getTokenUri","NFTsByOwner","owner_address","getNFTsByOwner","Categories","account","setAccount","products","setProducts","yourNftListing","setYourNftListing","marketItems","setMarketItems","isMounted","isConnected","init_page","Contract","Market","abi","NFT","your_nfts","Promise","all","map","it_tokenId","item","your_listing","it_listing","market_items","mark","i","owner","sold","itemId","Row","x_item","key","Col","xs","md","lg","client","create","host","port","protocol","path","uploadFileToIPFS","file","add","url","uploadedImageUrl","metadata","metadataRes","metaDataUrl","metaDataHashCID","imageHashCID","AddProduct","submitForm","setSubmitForm","quantity","setQuantity","nftImage","setNftImage","nftTitle","setNftTitle","nftDescription","setNftDescription","onChangeHandler","files","onSubmitHandler","index","result","status","Form","Group","as","controlId","Label","Control","required","rows","accept","disabled","Error404","style","textAlign","Image","fluid","App","exact","component","CreateSell","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45198485.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\n// import { useCookies } from 'react-cookie'\nexport const Context = React.createContext();\n\nexport const ContextStore = ({ children }) => {\n    let initialValue = null;\n    // const [cookies, setCookie, removeCookie] = useCookies(['USER_SESSION']);\n    const [userData, setUserData] = useState(initialValue)\n    \n    useEffect(() => {\n        //if (cookies.USER_SESSION) {\n            // fetch(`/auth/getUser`).then(res => res.json())\n            //     .then(res => {\n            //         return setUserData(res.user)\n            //     })\n        //}\n    }, [])\n\n    // console.log(userData)\n    const providerValue = useMemo(() => ({ userData, setUserData }), [userData, setUserData])\n\n    return (\n        <Context.Provider value={providerValue}>\n            {children}\n        </Context.Provider>\n    )\n}","import React, { /* useContext, */ useEffect, useState } from 'react';\nimport { Navbar, Nav} from 'react-bootstrap';\nimport { NavLink } from 'react-router-dom';\nimport './Header.css'\nimport { useHistory } from 'react-router';\nimport Web3Modal from \"web3modal\";\n\nconst Header = () => {\n    const { ethereum } = window;\n    const [currentAccount, setCurrentAccount] = useState('');\n    const history = useHistory();\n\n    useEffect(() => {\n        async function init_application() {\n            const { ethereum } = window;\n            if (!ethereum) {\n              console.log('Please install Metamask')\n              return;\n            }\n            \n            ethereum.request({method: 'eth_accounts'}).then((accounts) => {\n                if (accounts.length > 0) {\n                  setCurrentAccount(accounts[0])\n                  console.log(accounts);\n                }\n            });\n        }\n\n        init_application();\n    }, [currentAccount]);\n\n    ethereum.on('accountsChanged', (accounts) => {\n        history.go(0);\n    });\n\n    const connectWalletButton = () => {\n        return (\n          <button onClick={connectWalletHandler} className='btn btn-primary connect-wallet-button'>\n            Connect Wallet\n          </button>\n        )\n    }\n\n    const connectWalletHandler = async () => {\n        const { ethereum } = window;\n        if (!ethereum) {\n          console.log('Please install Metamask')\n          return;\n        }\n\n      \n        try {\n          const web3Modal = new Web3Modal({\n            network: \"bsc\", // optional\n            cacheProvider: true, // optional\n            providerOptions: {}, // required\n          });\n          await web3Modal.connect();\n          const accounts = await ethereum.request({method: 'eth_accounts'})\n          if (accounts && accounts.length > 0) {\n            setCurrentAccount(accounts[0])\n          }\n        } catch (error) {\n          console.log(error)\n        }\n    }\n\n    const mintNftButton = () => {\n        return (\n            <button onClick={()=>{history.push({ pathname: '/add-product' })}} className='btn btn-primary connect-wallet-button'>\n              Mint NFT\n            </button>\n        )\n    }\n\n    const chunkStrAccount = () => {\n      return '****' + currentAccount.substring(currentAccount.length - 10);\n    }\n\n    return (\n        <Navbar collapseOnSelect bg=\"light\" variant=\"light\">\n            <div className=\"container\">\n                <Navbar.Brand>\n                    <NavLink className=\"navbar-brand\" to=\"/\">All for you...</NavLink>\n                </Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        {/* <Nav.Link href=\"#features\">Features</Nav.Link>\n                        <Nav.Link href=\"#pricing\">Pricing</Nav.Link> */}\n                    </Nav>\n                    {currentAccount ?\n                        (<Nav>\n                            {mintNftButton()}\n\n                            <p className=\"mx-3\">{chunkStrAccount()}</p>\n                        </Nav>)\n                        :\n                        (<Nav>\n                            {connectWalletButton()}\n                        </Nav>)\n                    }\n                </Navbar.Collapse>\n            </div>\n        </Navbar>\n    )\n}\n\nexport default Header;","import './Footer.css';\nimport { AiFillInstagram, AiFillLinkedin } from 'react-icons/ai'; \nimport { FaFacebook } from 'react-icons/fa';\n\nfunction Footer() {\n    return (\n        <footer>\n            <div className=\"container\">\n                <div className=\"connections\">\n                    <a href=\"/#\" id=\"instaIcon\"><AiFillInstagram /></a>\n                    <a href=\"/#\" id=\"fbIcon\"><FaFacebook /></a>\n                    <a href=\"https://www.linkedin.com/in/iva-tosheva/\" target=\"_blank\" rel=\"noreferrer\" id=\"linkedIcon\"><AiFillLinkedin /></a>\n                </div>\n                All Rights Reserved &copy; 2021 &#8226;\n                <a href=\"https://github.com/Angel-Sky/ReactJS-Project\" target=\"_blank\" rel=\"noreferrer\">GitHub</a>\n            </div>\n        </footer >\n    )\n}\n\nexport default Footer;","require('dotenv').config();\n\nconst { ethereum } = window;\n\nconst NFT_CONTRACT = process.env.REACT_APP_NFT_CONTRACT;\nconst MARKET_CONTRACT = process.env.REACT_APP_MARKET_CONTRACT;\nconst GAS_PRICE = process.env.REACT_APP_GAS_PRICE;\n\nconst GetMarketItems = async (marketContract) => {\n    return await marketContract.methods.fetchMarketItems().call();\n}\n\nconst YourNFTsListing = async (marketContract) => {\n    return await marketContract.methods.fetchMyNFTsListingOnMarket().call();\n}\n\nconst AddNewListing = async (marketContract, web3, tokenID, price) => {\n    let priceToWei = web3.utils.toWei(price.toString(), 'ether');\n\n    const tx = {\n        'from': ethereum.selectedAddress,\n        'to': MARKET_CONTRACT,\n        \"gasPrice\": web3.utils.toHex(Number(GAS_PRICE) * Math.pow(10, 9)),\n        \"gasLimit\": web3.utils.toHex(500000), // fixed gasLimit\n        \"value\": web3.utils.toHex(0), // fixed gasLimit\n        'data': marketContract.methods.addListing(NFT_CONTRACT, tokenID, priceToWei).encodeABI(),\n    };\n    return await confirmMetamask(tx);\n}\n\nconst UpdateListing = async (marketContract, web3, tokenID, price) => {\n    let priceToWei = web3.utils.toWei(price.toString(), 'ether');\n\n    const tx = {\n        'from': ethereum.selectedAddress,\n        'to': MARKET_CONTRACT,\n        \"value\": web3.utils.toHex(0), // fixed gasLimit\n        'data': marketContract.methods.updateListing(tokenID, priceToWei).encodeABI(),\n    };\n    return await confirmMetamask(tx);\n}\n\nconst CancelListing = async (marketContract, web3, tokenID) => {\n    const tx = {\n        'from': ethereum.selectedAddress,\n        'to': MARKET_CONTRACT,\n        \"value\": web3.utils.toHex(0), // fixed gasLimit\n        'data': marketContract.methods.cancelListing(NFT_CONTRACT, tokenID).encodeABI(),\n    };\n    return await confirmMetamask(tx);\n}\n\nconst BuyNFT = async (marketContract, web3, itemID, price) => {\n    console.log(price.toString())\n    const tx = {\n        from: ethereum.selectedAddress,\n        to: MARKET_CONTRACT,\n        value: web3.utils.toHex(price.toString()),\n        data: marketContract.methods.buyItem(NFT_CONTRACT, itemID).encodeABI(),\n    };\n    return await confirmMetamask(tx);\n}\n\nconst confirmMetamask = async (tx) => {\n    console.log(tx)\n    const transactionReceipt = await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [\n            tx\n        ]\n    }).then(console.log);\n\n    return transactionReceipt;\n}\n\nexport {AddNewListing, GetMarketItems, BuyNFT, YourNFTsListing, UpdateListing, CancelListing}","import { Button, Card, FormControl, InputGroup } from 'react-bootstrap';\nimport { useEffect, useState } from 'react';\nimport Web3 from \"web3\";\nimport { Link, /* useHistory */ } from 'react-router-dom';\nimport { AddNewListing, BuyNFT, UpdateListing, CancelListing } from '../../utils/nft-market.js';\n\nfunction ProductCard({ params, type, current_wallet = '', web3, marketContract, nftContract }) {\n    const [nftData, setNftData] = useState({})\n    const [priceSell, setPriceSell] = useState(0)\n\n    if (web3 === null || web3 === '') {\n        if (window.ethereum) {\n            web3 = new Web3(window.ethereum);\n        } else if (window.web3) {\n            web3 = new Web3(window.web3.currentProvider);\n        };\n    }\n\n    useEffect(() => {\n        async function getNFTData() {\n            if (params.tokenUri !== null && params.tokenUri !== '') {\n                return await fetch(params.tokenUri, {method: \"GET\"})\n                .then((response) => response.json())\n                .then((responseJson) => {\n                    setNftData(responseJson);\n                    return responseJson;\n                })\n                .catch((error) => {\n                  console.error(error);\n                });\n            }\n        }\n\n        getNFTData()\n    },[params.tokenUri, web3]);\n\n    const changePrice = (e) => {\n        setPriceSell(e.target.value)\n    }\n\n    const onSubmitSellNFT = async (e) => {\n        console.log(params.tokenId, priceSell)\n        if (priceSell > 0) {\n            await AddNewListing(marketContract, web3, params.tokenId, priceSell)\n        } else {\n            alert('Price > 0');\n        }\n        setPriceSell(0)\n    }\n\n    const onSubmitUpdatePriceNFT = async (e) => {\n        if (priceSell > 0) {\n            await UpdateListing(marketContract, web3, params.tokenId, priceSell)\n        } else {\n            alert('Price > 0')\n        }\n        setPriceSell(0);\n    }\n\n    const onSubmitBuyNFT = async () => {\n        await BuyNFT(marketContract, web3, params.tokenId, params.price)\n        alert('Please wait confirmation from Metamask');\n    }\n\n    const onSubmitCancelSellNFT = async () => {\n        await CancelListing(marketContract, web3, params.tokenId)\n        alert('Please wait confirmation from Metamask');\n    }\n\n    const handleButtonWithType = () => {\n        if (type === 'mynft') {\n            return (\n                <div>\n                    <InputGroup className=\"mb-3\">\n                        <FormControl type=\"number\" min=\"0\"  placeholder=\"Price\" onChange={(e) => changePrice(e)} aria-describedby=\"basic-addon2\"/> \n                        <InputGroup.Text id=\"basic-addon2\">BNB</InputGroup.Text>\n                    </InputGroup>\n                    <Button className=\"w-100\" onClick={() => onSubmitSellNFT()}>Sell</Button>\n                </div>\n            );\n        } else if (type === 'mylisting') {\n            return (\n                <div>\n                    <InputGroup className=\"mb-3\">\n                        <FormControl type=\"number\" min=\"0\"  placeholder=\"Price\" onChange={(e) => changePrice(e)} aria-describedby=\"basic-addon2\"/> \n                        <InputGroup.Text id=\"basic-addon2\">BNB</InputGroup.Text>\n                    </InputGroup>\n                    <Button className=\"w-100\" onClick={() => onSubmitUpdatePriceNFT()}>Update Price</Button>\n                    <hr />\n                    <Button className=\"w-100 bg-danger text-white\" onClick={() => onSubmitCancelSellNFT()}>Cancel Listing</Button>\n                </div>\n            );\n        } else if (type === 'market') {\n            return (\n                <Button className=\"w-100\" onClick={() => onSubmitBuyNFT()}>Buy</Button>\n            );\n        }\n    }\n\n    return (\n        <Card>\n            <Link to={`#`}>\n                <Card.Img variant=\"top\" src={nftData.image} />\n                <Card.Body>\n                    <Card.Title>{nftData.name}</Card.Title>\n                    <small className=\"text-muted\">{nftData.description}</small>\n                    <br />\n                    {\n                        params.price && web3 !== null ?\n                        <small className='text-sm'>Price: {web3.utils.fromWei(params.price.toString(),'ether')} BNB</small>\n                        :\n                        ''\n                    }\n                </Card.Body>\n            </Link>\n            <Card.Footer>\n                <small className=\"text-muted\">\n                    {params.seller ? params.seller : ''}\n                </small>\n                { handleButtonWithType() }\n            </Card.Footer>\n        </Card>\n    )\n}\n\nexport default ProductCard;","require('dotenv').config();\n\nconst MAIN_ADDRESS = process.env.REACT_APP_MAIN_ADDRESS;\nconst PRIVATE_KEY = process.env.REACT_APP_PRIVATE_KEYS;\nconst GAS_PRICE = process.env.REACT_APP_GAS_PRICE;\nconst NFT_CONTRACT = process.env.REACT_APP_NFT_CONTRACT;\n\n// const { ethereum } = window;\n\nconst MintNFT = async (nftContract, web3, tokenURI) => {\n    //step 3: Define the minting function\n    const nonce = await web3.eth.getTransactionCount(MAIN_ADDRESS, 'latest'); //get latest nonce\n\n    //the transaction\n    const tx = {\n        'from': MAIN_ADDRESS,\n        'to': NFT_CONTRACT,\n        'nonce': nonce,\n        \"gasPrice\": web3.utils.toHex(Number(GAS_PRICE) * Math.pow(10, 9)),\n        \"gasLimit\": web3.utils.toHex(500000), // fixed gasLimit\n        \"value\": web3.utils.toHex(0), // fixed gasLimit\n        'data': nftContract.methods.mintItem(MAIN_ADDRESS, tokenURI).encodeABI()\n    };\n\n    console.log(tx)\n    //step 4: Sign the transaction\n    const signedTx = await web3.eth.accounts.signTransaction(tx, PRIVATE_KEY);\n    console.log(signedTx)\n    const transactionReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n    \n    console.log(`Transaction receipt: ${JSON.stringify(transactionReceipt)}`);\n    return transactionReceipt;\n}\n\nconst getTokenUri = async (nftContract, tokenID) => {\n    return await nftContract.methods.tokenURI(tokenID).call();\n}\n\nconst NFTsByOwner = async (nftContract, owner_address) => {\n    return await nftContract.methods.getNFTsByOwner(owner_address).call();\n}\n\nexport {MintNFT, getTokenUri, NFTsByOwner}","import { useEffect, useState } from 'react';\nimport ProductCard from '../components/ProductCard/ProductCard';\nimport { Col, Row } from 'react-bootstrap';\nimport '../components/Categories/Categories.css';\nimport '../components/ProductCard/ProductCard.css';\nimport { GetMarketItems, YourNFTsListing } from '../utils/nft-market.js';\nimport { getTokenUri, NFTsByOwner } from '../utils/mint-nft.js';\nimport Market from \"../truffle/abis/NFTMarket.json\";\nimport NFT from \"../truffle/abis/DauDQNFT.json\";\nimport Web3 from \"web3\";\n\nconst { ethereum } = window;\nconst NFT_CONTRACT = process.env.REACT_APP_NFT_CONTRACT;\nconst MARKET_CONTRACT = process.env.REACT_APP_MARKET_CONTRACT;\n\nlet web3;\nlet marketContract;\nlet nftContract;\n\nfunction Categories( ) {\n    const [account, setAccount] = useState('')\n    const [products, setProducts] = useState([]);\n    const [yourNftListing, setYourNftListing] = useState([])\n    const [marketItems, setMarketItems] = useState([])\n\n    useEffect(() => {\n        let isMounted = true;  \n        if (!ethereum) {\n            console.log('Please install Metamask')\n            return;\n        }\n\n        if (!ethereum.isConnected()) {\n            return false;\n        }\n        \n        // let your_nfts = [];\n        const init_page = async () => {\n            ethereum.request({method: 'eth_accounts'}).then(async (accounts) => {\n                if (accounts.length > 0) {\n                    setAccount(accounts[0]);\n                    if (window.ethereum) {\n                        web3 = new Web3(window.ethereum);\n                    } else if (window.web3) {\n                        web3 = new Web3(window.web3.currentProvider);\n                    };\n                \n                    marketContract = new web3.eth.Contract(Market.abi, MARKET_CONTRACT,{from: ethereum.selectedAddress});\n                    nftContract = new web3.eth.Contract(NFT.abi, NFT_CONTRACT, {from: ethereum.selectedAddress});\n        \n                    if (isMounted) {\n                        let your_nfts = await NFTsByOwner(nftContract, accounts[0]);\n                        your_nfts = await Promise.all(your_nfts.map(async it_tokenId => {\n                            let tokenUri = await getTokenUri(nftContract, it_tokenId)\n                            let item = {\n                                tokenId: it_tokenId.toString(),\n                                tokenUri\n                            }\n                            return item\n                        }));\n                        setProducts(your_nfts)\n\n                        let your_listing = await YourNFTsListing(marketContract);\n                        your_listing = await Promise.all(your_listing.map(async it_listing => {\n                            let tokenUri = await getTokenUri(nftContract, it_listing.tokenId)\n                            let item = {\n                                tokenId: it_listing.tokenId.toString(),\n                                tokenUri\n                            }\n                            return item\n                        }));\n                        setYourNftListing(your_listing);\n        \n                        let market_items =  await GetMarketItems(marketContract);\n                        market_items = await Promise.all(market_items.map(async i => {\n                            let tokenUri = await getTokenUri(nftContract, i.tokenId)\n                            let item = {\n                              price: i.price.toString(),\n                              tokenId: i.tokenId.toString(),\n                              seller: i.seller,\n                              owner: i.owner,\n                              tokenUri,\n                              sold: i.sold,\n                              itemId: i.itemId\n                            }\n                            return item\n                        }))\n                        setMarketItems(market_items);\n                    }\n                }\n            });\n\n        }\n        init_page();\n        return () => { isMounted = false };\n    }, [account])\n\n      return (\n        <>\n            <div className=\"container\">\n                <hr/>\n                <label>\n                    Your NFT\n                </label>\n                <Row>\n                    {products.length > 0 && web3 !== null ? products\n                    .map((x_item, key) =>\n                        <Col xs={12} md={6} lg={3} key={key}>\n                            <ProductCard params={x_item} type=\"mynft\" web3={web3} marketContract={marketContract} nftContract={nftContract}/>\n                        </Col>\n                    )\n                    :\n                    <Col><small>You don't have NFTs</small></Col>\n                    }\n                </Row>\n                <hr/>\n                <label>\n                    Your NFT Listing on Market\n                </label>\n                <Row>\n                    {yourNftListing.length > 0 && web3 !== null ? yourNftListing\n                    .map((x_item, key) =>\n                        <Col xs={12} md={6} lg={3} key={key}>\n                            <ProductCard params={x_item} type=\"mylisting\" web3={web3} marketContract={marketContract} nftContract={nftContract}/>\n                        </Col>\n                    )\n                    :\n                    <Col><small>You don't have NFTs</small></Col>\n                    }\n                </Row>\n                <hr/>\n                <label>\n                    Marketplace\n                </label>\n                <Row>\n                    {marketItems.length > 0 && web3 !== null ? marketItems\n                    .map((x_item, key) =>\n                        <Col xs={12} md={6} lg={3} key={key}>\n                            <ProductCard params={x_item} type=\"market\" current_wallet={account} web3={web3} marketContract={marketContract} nftContract={nftContract}/>\n                        </Col>\n                    )\n                    :\n                    <Col><small>No NFTs on marketplace</small></Col>\n                    }\n                </Row>\n            </div>\n        </>\n    )\n}\n\nexport default Categories;","import Web3 from \"web3\";\nimport React, { useEffect, useState } from \"react\";\nimport { Form, Button, Col} from 'react-bootstrap';\nimport '../components/CreateSell/CreateSell.css';\nimport NFT from \"../truffle/abis/DauDQNFT.json\";\nimport { uploadFileToIPFS } from '../utils/ipfs.js';\nimport { MintNFT } from '../utils/mint-nft.js';\n\nconst { ethereum } = window;\nconst NFT_CONTRACT = process.env.REACT_APP_NFT_CONTRACT;\n\nlet web3;\nlet nftContract;\n\nrequire('dotenv').config();\n\nfunction AddProduct() {\n    const [submitForm, setSubmitForm] = useState(false);\n    const [quantity, setQuantity] = useState('');\n    const [nftImage, setNftImage] = useState('');\n    const [nftTitle, setNftTitle] = useState('');\n    const [nftDescription, setNftDescription] = useState('');\n\n    useEffect(() => { \n        if (!ethereum || !ethereum.isConnected()) {\n            console.log('Please install Metamask')\n            return;\n        }        \n        \n        const init_page = async () => {\n            ethereum.request({method: 'eth_accounts'}).then(async (accounts) => {\n                if (accounts.length > 0) {\n                    if (window.ethereum) {\n                        web3 = new Web3(window.ethereum);\n                    } else if (window.web3) {\n                        web3 = new Web3(window.web3.currentProvider);\n                    };\n                    nftContract = new web3.eth.Contract(NFT.abi, NFT_CONTRACT);\n                }\n            });\n        }\n        init_page();\n    }, []);\n\n    const onChangeHandler = (e, name) =>  {\n        switch (name) {\n            case 'image':\n                setNftImage(e.target.files[0]);\n                console.log('set image');\n                break;\n            case 'title':\n                setNftTitle(e.target.value);\n                console.log('set title');\n                break;\n            case 'description':\n                setNftDescription(e.target.value);\n                console.log('set description');\n                break;\n            case 'quantity':\n                setQuantity(e.target.value);\n                console.log('set quantity');\n                break;\n            default:\n                break;\n        }\n    }\n\n    const onSubmitHandler = async (e) => {\n        if (!nftImage || !nftTitle || !nftDescription) {\n            alert('Please fill info');\n            return false;\n        }\n        setSubmitForm(true);\n        uploadFileToIPFS(nftImage, nftTitle, nftDescription).then(async (response) => {\n            console.log(response);\n            let result;\n            for (let index = 1; index <= quantity; index++) {\n                result = await MintNFT(nftContract, web3, response.metaDataUrl);\n            }\n            if (result.status === true || result.status === 'true') {\n                alert('Success');\n            }\n            setSubmitForm(false);\n        });\n    }\n\n    return (\n        <>\n            <div className='container'>\n                <h1 className=\"heading\">Add a Product</h1>\n                {/* <Form onSubmit={onSubmitHandler()}> */}\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"formGridTitle\">\n                            <Form.Label>quantity</Form.Label>\n                            <Form.Control type=\"number\" placeholder=\"Enter quantity\" name=\"quantity\" min=\"1\" required onChange={(e) => {onChangeHandler(e, 'quantity')}} />\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"formGridTitle\">\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter title\" name=\"title\" required onChange={(e) => {onChangeHandler(e, 'title')}} />\n                        </Form.Group>\n                    </Form.Row>\n\n                    <Form.Group controlId=\"formGridDescription.ControlTextarea1\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control as=\"textarea\" rows={3} name=\"description\" required onChange={(e) => {onChangeHandler(e, 'description')}} />\n                    </Form.Group>\n\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"formGridImage\" >\n                            <Form.Label>Image</Form.Label>\n                            <Form.Control name=\"image\" accept=\"image/*\" type=\"file\" required onChange={(e) => {onChangeHandler(e, 'image')}} />\n                        </Form.Group>\n                    </Form.Row>\n                    <Button className=\"col-lg-12\" variant=\"dark\" type=\"button\" onClick={(e) => {onSubmitHandler()}} disabled={submitForm}>Add product</Button>\n                {/* </Form> */}\n            </div>\n        </>\n    )\n}\n\nexport default AddProduct;","/* eslint-disable */\nconst { create } = require(\"ipfs-http-client\");\n\nconst client = create({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n  path: \"api/v0\",\n});\n\n// THIS FUNCTION MUST BE CALLED WITH YOUR IMAGE 'FILE' BEING PASSED IN AS AN ARGUMENT\n// I SUGGEST PASSING IN A BLOB OF THE FILE OR A DATA URI OBJECT OF AN IMAGE\nexport const uploadFileToIPFS = async (file, name, description) => {\n  try {\n    //1 ADD File to IPFS\n    const url = await client.add(file);\n    const uploadedImageUrl = `https://ipfs.infura.io/ipfs/${url?.path}`;\n\n    //2 ADD Metadata to IPFS\n    const metadata = {\n      name: name,\n      description: description,\n      image: uploadedImageUrl,\n    };\n    const metadataRes = await client.add(JSON.stringify(metadata));\n    const metaDataUrl = `https://ipfs.infura.io/ipfs/${metadataRes?.path}`;\n\n    console.log(metaDataUrl)\n\n    // IF YOU WISH TO PIN YOUR FILE HERE IS THE COMMAND\n    // YOU WILL NEED TO ADD AN AUTH HEADER TO YOUR REQUEST IN ORDER TO PIN USING INFURA\n    // AT TIME OF WRITING THIS (Sept 2021) THERE IS A BUG FOR USING PIN COMMAND FROM THE FRONT END\n    //await client.pin.add(metadataRes?.path);\n\n    //3 return image & metadata URLs and also the CID for each\n    return {\n      uploadedImageUrl,\n      metaDataUrl,\n      metaDataHashCID: metadataRes?.path,\n      imageHashCID: url?.path,\n    };\n  } catch (e) {\n    console.log(\"error uplaoding to IPFS\", e);\n  }\n};\n","import { Image } from 'react-bootstrap';\n\nfunction Error404() {\n    return (\n        <div className=\"container\" style={{textAlign: \"center\"}}>\n            <Image src=\"http://store.picbg.net/pubpic/32/E3/c2b456c4b2d532e3.jpg\" fluid />\n        </div>\n    )\n}\n\nexport default Error404;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\nimport Categories from './Pages/Categories';\nimport CreateSell from './Pages/CreateSell';\nimport Error404 from './Pages/Error404';\n\nfunction App() {\n   return (\n      <>\n         <Header />\n         <Switch>\n            <Route path=\"/\" exact component={Categories} />\n            <Route path='/add-product' exact component={CreateSell} />;\n            <Route component={Error404} />\n         </Switch>\n         <Footer />\n      </>\n   );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ContextStore } from './ContextStore';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n   // <React.StrictMode>\n      <ContextStore>\n         <BrowserRouter>\n            <App />\n         </BrowserRouter>\n      </ContextStore>,\n   // </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}